var current_user, current_organisation;
APP.init = function() {
  /*this.global.detectBodyChanges();*/

  // Load current_user and current_organisation data
  var body = $('body');
  current_user = { id: parseInt(body.data('current-user-id')), name: body.data('current-user-name') };
  current_organisation = { id: parseInt(body.data('current-organisation-id')) };

  this.global.contentAreaResizeInit();

  if ($('#header:visible').length > 0) {
    // Load the menu
    this.global.menuInit();
    this.global.keyboardShortcutsInit();
    this.global.searchBarInit();

    // Load the feedback module
    new IADAFeedback({
      open_button_id: 'open-feedback-button',
      backend_url: Routes.feedbacks_path({ format: 'json' })
    });
  }

  // Replace default confirm box with our confirm
  this.global.replaceConfirmBox();

  // Load stickies (if #note-container is present)
  this.stickies.loadStickies();

  // Set the upper nprogress bar as the default ajax complete and start handlers
  this.global.addProgressbarToAjax();

  // Initialize tabs
  this.global.initializeTabs();

  // Initialize special form fields, such as date- and timepickers, special Cwic Controls (select, checkbox, ...)
  this.global.initializeFormFields();

  if(Modernizr.backgroundsize && Modernizr.smil) {
    $('img.ajax_wait').attr('src', '<%= asset_path('ajax_wait.svg') %>');
    $('div.ajax-wait').css('background-image', '<%= asset_path('ajax_wait.svg') %>');
  }
};

// Add progress bar for Turbolink requests
$(document).on('page:fetch', function() { NProgress.stackPush(); });
$(document).on('page:load', function() { NProgress.stackPop(); });
$(document).on('page:restore', function() { NProgress.remove(); });

APP.global = {
  /*
  detectBodyChanges: function() {
    var observeDOM = (function(){
        var MutationObserver = window.MutationObserver || window.WebKitMutationObserver,
            eventListenerSupported = window.addEventListener;

        return function(obj, callback){
            if( MutationObserver ){
                // define a new observer
                var obs = new MutationObserver(function(mutations, observer){
                    if( mutations[0].addedNodes.length || mutations[0].removedNodes.length )
                        callback();
                });
                // have the observer observe foo for changes in children
                obs.observe( obj, { childList:true, subtree:true });
            }
            else if( eventListenerSupported ){
                obj.addEventListener('DOMNodeInserted', callback, false);
                obj.addEventListener('DOMNodeRemoved', callback, false);
            }
        }
    })();

    observeDOM( document.body ,function(){
        $(document).trigger('thisIsADifferentBody');
        console.log('Body changed');
    });
  },
  */
  contentAreaResizeInit: function() {
    $('#content-area').css({top: $('#header').outerHeight(true) + 'px'});
    $(window).on('resize', function() {
      $('#content-area').css({top: $('#header').outerHeight(true) + 'px'});
    });
  },
  menuInit: function() {
    var submenuBox = $('#submenu-box');

    this.slideSubMenuByMenuItem($('#main-menu > li.active').first().attr('id'), false);

    $('#main-menu > li > a').on('click', function() {
      return APP.global.slideSubMenuByMenuItem($(this).parent('li').attr('id'), true);
    });
  },
  searchBarInit: function() {
    $('#open-search-button').on('click', function() {
      $(window).trigger('header-start-animation');
      var searchBar = $('#search-bar');
      var contentArea = $('#content-area');
      var searchField = $('#global_search');
      if(!searchBar.hasClass('open')) {
        $(this).addClass('open');
        contentArea.animate({top: $('#header').outerHeight(true) + searchBar.find('.inner').outerHeight() + 'px'}, 200, 'swing');
        searchBar.animate({ height: searchBar.find('.inner').outerHeight() + 'px' }, 200, function() {
          searchBar.css({ height: 'auto'}).addClass('open');
          $(window).trigger('header-animated');
        });
        searchField.focus();
      } else {
        searchField.blur().val('');
        $(this).removeClass('open');
        contentArea.animate({top: $('#header').outerHeight(true) - searchBar.find('.inner').outerHeight() + 'px'}, 200, 'swing');
        searchBar.animate({ height: 0 }, 200, function() {
          searchBar.removeClass('open');
          $(window).trigger('header-animated');
        });
      }
      return false;
    });
  },
  addProgressbarToAjax : function() {
    NProgress.configure({ container: $('div#progress-bar-container'), showSpinner: false });

    $(document).ajaxStart(function() {
      NProgress.stackPush();
    });

    $(document).ajaxComplete(function() {
      NProgress.stackPop();
    });
  },
  slideSubMenuByMenuItem: function(htmlId, animated) {
    var submenuBox = $('#submenu-box');
    var contentArea = $('#content-area');
    var menuItem = $('#' + htmlId);
    var relatedSubmenu = $('#submenu-box > .submenu[data-main-menu-relation="' + htmlId + '"]').first();
    var duration = animated ? 250 : 0;

    if($(submenuBox).is(':animated')) {
      return false;
    } else if (!htmlId || relatedSubmenu.length == 0 || menuItem.length == 0) {
      return true;
    } else {
      $(window).trigger('header-start-animation');
      var menuItems = $('#main-menu > li');
      var submenus = $('#submenu-box > .submenu');

      $(menuItems).children('a').each(function(){
        var shortcutKey = APP.global.getShortcutKeyById($(this).data('shortcutFor'));
        if (shortcutKey) {
          var txt = $(this).text();
          var index = txt.toUpperCase().indexOf(shortcutKey);
          if (index >= 0) {
            $(this).html(txt.substring(0, index) + '<span class="shortcut-highlight">' + txt.substring(index, index + 1) + '</span>' + txt.substring(index + 1));
          }
        }
      });

      if ($(menuItem).hasClass('selected')) { /* Contract expanded submenu */
        $(menuItems).removeClass('selected');
        $(menuItems).children('a').each(function(){
          var shortcutKey = APP.global.getShortcutKeyById($(this).data('shortcutFor'));
          if (shortcutKey) {
            $(this).attr('title', jsLang.global.expand_menu + ' [Alt+' + shortcutKey + ']');
          }
        });
        $(contentArea).animate({top: $('#header').outerHeight(true) - submenuBox.outerHeight(false) + 'px'}, duration, 'swing');
        $(submenuBox).animate({height: 0}, duration, 'swing', function() {
          $(submenus).removeClass('selected');
          $(window).trigger('header-animated');
        });
      } else {
        $(menuItems).removeClass('selected');
        $(menuItems).children('a').each(function(){
          var shortcutKey = APP.global.getShortcutKeyById($(this).data('shortcutFor'));
          if (shortcutKey) {
            $(this).attr('title', jsLang.global.expand_menu + ' [Alt+' + shortcutKey + ']');
          }
        });
        $(menuItem).addClass('selected');
        $(menuItem).children('a').each(function(){
          var shortcutKey = APP.global.getShortcutKeyById($(this).data('shortcutFor'));
          if (shortcutKey) {
            $(this).attr('title', jsLang.global.contract_menu + ' [Alt+' + shortcutKey + ']');
          }
        });
        if ($(submenuBox).height() > 0) { /* Contract expanded submenu first, then expand requested submenu */
          contentArea.animate({top: $('#header').outerHeight(true) - submenuBox.outerHeight(false) + 'px'}, duration, 'swing');
          $(submenuBox).animate({height: 0}, duration, 'swing', function() {
            $(submenus).removeClass('selected');
            $(relatedSubmenu).addClass('selected');
            contentArea.animate({top: $('#header').outerHeight(true) + relatedSubmenu.outerHeight(false) + 'px'}, duration, 'swing');
            $(submenuBox).animate({height: relatedSubmenu.outerHeight(false) + 'px'}, duration, 'swing', function() {
              $(this).css({height: 'auto'});
              $(window).trigger('header-animated');
            });
          });
        } else { /* Expand requested submenu */
          $(submenus).removeClass('selected');
          $(relatedSubmenu).addClass('selected');
          $(contentArea).animate({top: $('#header').outerHeight(true) + relatedSubmenu.outerHeight(false) + 'px'}, duration, 'swing');
          $(submenuBox).animate({height: relatedSubmenu.outerHeight(false) + 'px'}, duration, 'swing', function(){
            $(this).css({height: 'auto'});
            $(window).trigger('header-animated');
          });
        }
      }
      return false;
    }
  },
  replaceConfirmBox: function() {
    $.rails.allowAction = function(link) {
      if(!$(link).attr('data-confirm')) {
        return true;
      }
      APP.global.createConfirmBox(link);
      return false;
    };
    $.rails.confirmed = function(link) {
      var link = $(link);
      link.removeAttr('data-confirm');
      link.trigger('click.rails');
    };
  },
  createConfirmBox: function(link) {
    var link = $(link);
    var message = link.attr('data-confirm');

    var content = $('<div>');

    content.append($('<p>', { text: message, class: 'confirm-question' }));

    var notOkButton = $('<a>', {class: 'button', text: jsLang.global.no });
    var okButton = $('<a>', {class: 'button red', text: jsLang.global.yes });
    okButton.on('click', function(){ closeModal(); $.rails.confirmed(link); });
    notOkButton.on('click', function(){ closeModal(); });

    content.append(okButton);
    content.append(notOkButton);

    openModal('confirm', content);
  },
  keyboardShortcutsInit: function() {
    $(document).keydown(function(event) {
      if(event.altKey) {
        var keyString = String.fromCharCode(event.which);
        $('#main-menu > li > a').each(function(){
          var menuItemId = $(this).parent().attr('id');
          var menuItemShortcutKey = APP.global.getShortcutKeyById($(this).data('shortcutFor'));
          if(keyString == menuItemShortcutKey) {
            return APP.global.executeShortcut(menuItemId);
          }
        });
      }
    });
  },
  executeShortcut: function(htmlId) {
    this.slideSubMenuByMenuItem(htmlId, true);
    return false;
  },
  getShortcutKeyById: function(id) {
    var key = jsLang.shortcutKeys[id.replace(/[^a-zA-Z0-9]/g, '_')];
    if (typeof(key) != 'undefined' && key.length == 1) {
      return key.toUpperCase();
    } else {
      return false;
    }
  },
  initializeTabs: function() {
    var container = $('#tabs');
    container.tabs({ active: this.determineFirstTabWithErrors(container) });
  },
  determineFirstTabWithErrors: function(container) {
    // Determines the first tab to open. This is the first tab with errors (if any, else simply open the first tab)
    var first = 0;
    container.find('.nav a').each(function(index) {
      var id = $(this).attr('href'); // Starts with #
      var tab = container.find(id);
      if(tab.find('div.field_with_errors').length) {
        first = index
        return false; // Break
      }
    });
    return first;
  },
  initializeFormFields: function(parent) {
    if(!parent) {
      parent = document.body;
    }
    $(parent).find('select, :radio, :checkbox, input[type=file]').cwicControl();
    $(parent).find('.datepicker-field').datepicker({ showOn: 'both' });
    $(parent).find('.timepicker-field').timepicker({ showPeriodLabels: false, showOn: 'both' });

    $(parent).find('input.with-clear').each(function() {
      var input = $(this);
      if(input.val() != '') {
        input.wrap('<div class="field-with-clear"></div>');
        var span = $('<span>', { text: 'X' });
        input.after(span);
        span.on('click', function(){
          input.val('');
          input.trigger('change');
        });
      }
    });

    $(document).on('nested:fieldAdded', function() { APP.global.initializeFormFields(this); });
  }
};

APP.global.nested_objects = {
  initWrapper: function(wrapper) {
    wrapper.find('.icon-edit').click(function() { APP.global.nested_objects.editWrapper(wrapper) });
    wrapper.find('.icon-ok').click(function() { APP.global.nested_objects.finishWrapper(wrapper) });

    // Make the extra remove link work
    wrapper.find('.remove-nested-fields-extra').click(function () { $(this).closest('.fields').find('.remove_nested_fields').first().click(); });

    // If the option is not valid, then show form immediately. New properties are also not valid by default.
    if(wrapper.attr('data-valid') == 'false') {
      this.editWrapper(wrapper);
    }
  },
  editWrapper: function(wrapper) {
    wrapper.find('.view').hide();
    wrapper.find('.form').show();
  },
  finishWrapper: function(wrapper) {
    // Copy all data from input fields to corresponding containers in view
    wrapper.find('.view [data-field]').each(function () {
      var input = wrapper.find('.form [data-field="' + $(this).attr('data-field') + '"]');
      if(input) {
        if(input.is('select')) {
          // We are dealing with a checkbox field
          var value = (input.val() ? input.find(':selected').text() : '');
        } else if(input.is('input') && input.attr('type') == 'checkbox') {
          // We are dealing with a checkbox field
          var value = input.is(':checked') ? jsLang.global.yes : jsLang.global.no;
        } else {
          // We are dealing with a normal field
          var value = input.val();
        }
      } else {
        var value = '';
      }
      $(this).html(formatText(value));
    });
    wrapper.find('.form').hide();
    wrapper.find('.view').show();
  }
};

// XXX TODO move functions below (for example arrayToSentence) to APP.util

function arrayToSentence(array) {
  if(array.length <= 1) {
    return array
  } else {
    return array.slice(0, array.length - 1).join(', ') + jsLang.global.and_connector + array.slice(-1);
  }
}

function formatText(text) {
  if(text == '') {
     return '<em>' + jsLang.global.none + '</em>';
  } else {
    return text;
  }
}

function openModal(modalID, content, closeCallback) {
  var closeCallback = closeCallback || this.closeModal;

  var overlay = $('a.overlay');
  overlay.on('click', closeCallback);

  var modalDiv = $('div.modal');
  modalDiv.attr('id', modalID);
  modalDiv.find('a.close').on('click', closeCallback);

  // Also perform close on hitting ESC
  $(document).on('keyup.escape', function(e) {
    if (e.keyCode == 27) { closeCallback(e); }
  });

  // Content toevoegen aan modal
  modalDiv.append(content);

  // Open overlay
  overlay.addClass('opened');
  $('html').addClass('with-overlay');

  // Modal tonen
  modalDiv.addClass('opened');

  return modalDiv;
}

function closeModal(e) {
  if(e != null) {
    e.preventDefault();
  }

  var modalDiv = $('div.modal');

  // Modal verbergen
  modalDiv.removeClass('opened');

  modalDiv.children(':not(a.close)').remove();
  modalDiv.removeAttr('id');

  var overlay = $('a.overlay');

  // Sluit overlay
  overlay.removeClass('opened');
  $('html').removeClass('with-overlay');

  // Remove events from the overlay
  overlay.off('click');
  overlay.find('a.close').off('click');

  // Remove close event from ESC button
  $(document).off('keyup.escape');


  if(e != null) {
    return false;
  }
}

$.size = function(obj) {
  if(typeof Object.keys !== 'undefined') {
    return Object.keys(obj).length
  } else {
    var size = 0, key;
    for(key in obj) {
      if(obj.hasOwnProperty(key)) size++;
    }
    return size;
  }
}

Object.extend = function(destination, source) {
  for(var property in source) {
    if(source.hasOwnProperty(property)) {
      if( destination[property] != null && typeof destination[property] == 'object') {
        destination[property] = Object.extend(destination[property], source[property])
      } else {
        destination[property] = source[property];
      }
    }
  }
  return destination;
};
