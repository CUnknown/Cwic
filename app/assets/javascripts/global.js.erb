var current_user, current_organisation, current_locale;

APP.init = function() {
  // Load current_user and current_organisation data
  var body = $('body');
  current_user = { id: parseInt(body.data('current-user-id')), name: body.data('current-user-name') };
  current_organisation = { id: parseInt(body.data('current-organisation-id')) };
  current_locale = body.data('current-locale');
  this.global.initLocale(current_locale);

  if ($('#header:visible').length > 0) {
    // Load the menu
    this.global.menuInit();
    this.global.keyboardShortcutsInit();
    this.global.searchBarInit();

    // Load the feedback module
    new CwicFeedback({
      open_button_id: 'open-feedback-button',
      backend_url: Routes.feedbacks_path({ format: 'json' })
    });
  }

  // Load the api for the local menu
  this.global.loadLocalMenu();

  // Load Google if needed
  $(document).on('page:load', APP.global.initializeGoogleMapsFunctions);

  // Replace default confirm box with our confirm
  this.global.replaceConfirmBox();

  // Load stickies (if #note-container is present)
  this.stickies.loadStickies();

  // Set the upper nprogress bar as the default ajax complete and start handlers
  this.global.addProgressbarToAjax();

  // Initialize tabs
  this.global.initializeTabs();

  // Initialize special form fields, such as date- and timepickers, special Cwic Controls (select, checkbox, ...)
  this.global.initializeSpecialFormFields();

  // Make select all button on tables work
  this.global.bindSelectAllCheckboxEvents();

  // Auto submit limiting fields
  $('#limiting select').on('change', function() { this.form.submit(); });

  if(Modernizr.backgroundsize && Modernizr.smil) {
    $('img.ajax_wait').attr('src', '<%= asset_path('ajax_wait.svg') %>');
    $('div.ajax-wait').css('background-image', '<%= asset_path('ajax_wait.svg') %>');
  }
};

// Add progress bar for Turbolink requests
$(document).on('page:fetch', function() { NProgress.stackPush(); });
$(document).on('page:load', function() { NProgress.stackPop(); });
$(document).on('page:restore', function() { NProgress.remove(); });

APP.global = {
  initLocale: function(locale) {
    $.datepicker.setDefaults($.datepicker.regional[locale]);
    $.timepicker.setDefaults($.timepicker.regional[locale]);
    jsLang = jsLangs[locale]; // TODO this is not very nice. Better to rewrite whole custom application JavaScript translations to I18n-js gem (if it is stable, ask Kevin for more information)
  },
  bindSelectAllCheckboxEvents: function() {
    $('input.select-all-checkbox').siblings('div.cwic-checkbox').on('click', function() {
      var select_all_button = $(this).siblings('input.select-all-checkbox');
      select_all_button.parents('table').find('input.select-all-child').prop('checked', select_all_button.is(':checked')).trigger('change');
    });

    $('input.select-all-child').on('change', function() {
      var select_all_child = $(this);
      var select_all_childs = select_all_child.parents('table').find('input.select-all-child');
      var select_all_button = select_all_child.parents('table').find('input.select-all-checkbox');

      var all_selected = true;
      select_all_childs.each(function() {
        if(!$(this).is(':checked')) {
          all_selected = false;
          // We dont need to continue the each loop
          return false;
        }
      });

      select_all_button.prop('checked', all_selected).trigger('change');

    });
  },
  contentAreaResize: function() {
    $('#below-header').css({top: $('#header').outerHeight(true) + 'px'});
    $('#content-area').css({top: $('#local-menu').outerHeight(true) + 'px'});
  },
  menuInit: function() {
    var submenuBox = $('#submenu-box');
    submenuBox.data('width', submenuBox.width() + 'px');

    this.slideSubMenuByMenuItem($('#main-menu > li.active').first().attr('id'), false);

    $('#main-menu > li > a').on('click', function() {
      return APP.global.slideSubMenuByMenuItem($(this).parent('li').attr('id'), true);
    });
  },
  loadLocalMenu: function(){
    window.localMenu = new CwicLocalMenu($('div#local-menu'));
  },
  searchBarInit: function() {
    $('#open-search-button').on('click', function() {
      $(window).trigger('header-start-animation');
      var searchBar = $('#search-bar');
      var belowHeader = $('#below-header');
      var searchField = $('#global_search');
      if(!searchBar.hasClass('open')) {
        $(this).addClass('open');
        belowHeader.animate({top: $('#header').outerHeight(true) + searchBar.find('.inner').outerHeight() + 'px'}, 200, 'swing');
        searchBar.animate({ height: searchBar.find('.inner').outerHeight() + 'px' }, 200, function() {
          searchBar.css({ height: 'auto'}).addClass('open');
          $(window).trigger('header-animated');
        });
        searchField.focus();
      } else {
        searchField.blur().val('');
        $(this).removeClass('open');
        belowHeader.animate({top: $('#header').outerHeight(true) - searchBar.find('.inner').outerHeight() + 'px'}, 200, 'swing');
        searchBar.animate({ height: 0 }, 200, function() {
          searchBar.removeClass('open');
          $(window).trigger('header-animated');
        });
      }
      return false;
    });
  },
  addProgressbarToAjax : function() {
    NProgress.configure({ container: $('div#progress-bar-container'), showSpinner: false });

    $(document).ajaxStart(function() {
      NProgress.stackPush();
    });

    $(document).ajaxComplete(function() {
      NProgress.stackPop();
    });
  },
  slideSubMenuByMenuItem: function(htmlId, animated) {
    var submenuBox = $('#submenu-box');
    var mainArea = $('#main-area');
    var menuItem = $('#' + htmlId);
    var relatedSubmenu = $('#submenu-box > .submenu[data-main-menu-relation="' + htmlId + '"]').first();
    var duration = animated ? 250 : 0;

    if($(submenuBox).is(':animated')) {
      return false;
    } else if (!htmlId || relatedSubmenu.length == 0 || menuItem.length == 0) {
      return true;
    } else {
      $(window).trigger('header-start-animation');
      var menuItems = $('#main-menu > li');
      var submenus = $('#submenu-box > .submenu');

      $(menuItems).children('a').each(function(){
        var shortcutKey = APP.global.getShortcutKeyById($(this).data('shortcutFor'));
        if (shortcutKey) {
          var txt = $(this).text();
          var index = txt.toUpperCase().indexOf(shortcutKey);
          if (index >= 0) {
            $(this).html(txt.substring(0, index) + '<span class="shortcut-highlight">' + txt.substring(index, index + 1) + '</span>' + txt.substring(index + 1));
          }
        }
      });

      if ($(menuItem).hasClass('selected')) { /* Contract expanded submenu */
        $(menuItems).removeClass('selected');
        $(menuItems).children('a').each(function(){
          var shortcutKey = APP.global.getShortcutKeyById($(this).data('shortcutFor'));
          if (shortcutKey) {
            $(this).attr('title', jsLang.global.expand_menu + ' [Alt+' + shortcutKey + ']');
          }
        });
        $(mainArea).animate({left: 0}, duration, 'swing');
        $(submenuBox).animate({width: 0}, duration, 'swing', function() {
          $(submenus).removeClass('selected');
          $(window).trigger('header-animated');
        });
      } else {
        $(menuItems).removeClass('selected');
        $(menuItems).children('a').each(function(){
          var shortcutKey = APP.global.getShortcutKeyById($(this).data('shortcutFor'));
          if (shortcutKey) {
            $(this).attr('title', jsLang.global.expand_menu + ' [Alt+' + shortcutKey + ']');
          }
        });
        $(menuItem).addClass('selected');
        $(menuItem).children('a').each(function(){
          var shortcutKey = APP.global.getShortcutKeyById($(this).data('shortcutFor'));
          if (shortcutKey) {
            $(this).attr('title', jsLang.global.contract_menu + ' [Alt+' + shortcutKey + ']');
          }
        });
        if ($(submenuBox).height() > 0) { /* Contract expanded submenu first, then expand requested submenu */
          $(mainArea).animate({left: 0}, duration, 'swing');
          $(submenuBox).animate({width: 0}, duration, 'swing', function() {
            $(submenus).removeClass('selected');
            $(relatedSubmenu).addClass('selected');
            $(mainArea).animate({left: $(submenuBox).data('width')}, duration, 'swing');
            $(submenuBox).animate({width: $(this).data('width')}, duration, 'swing', function() {
              $(window).trigger('header-animated');
            });
          });
        } else { /* Expand requested submenu */
          $(submenus).removeClass('selected');
          $(relatedSubmenu).addClass('selected');
          $(mainArea).animate({left: $(submenuBox).data('width')}, duration, 'swing');
          $(submenuBox).animate({width: $(this).data('width')}, duration, 'swing', function(){
            $(window).trigger('header-animated');
          });
        }
      }
      return false;
    }
  },
  replaceConfirmBox: function() {
    $.rails.allowAction = function(element) {
      if(element.data('skip-confirm-once')) { element.data('skip-confirm-once', null); return true; }

      var message = element.data('confirm');
      if(!message) { return true; }

      if($.rails.fire(element, 'confirm')) {
        APP.global.createConfirmBox(element, message);
      }
      return false;
    };
    $.rails.allowActionAnswer = function(element, answer) {
      callback = $.rails.fire(element, 'confirm:complete', [answer]);
      if(answer && callback) {
        element.data('skip-confirm-once', true); // Skip the confirm question once
        element.trigger('click'); // Replay the action. Note this works for certain elements (links, buttons, etc.), but probably not all kinds.
      }
    };
  },
  createConfirmBox: function(element, message) {
    var content = $('<div>');

    content.append($('<p>', { text: message, class: 'confirm-question' }));

    var notOkButton = $('<a>', { class: 'button', text: jsLang.global.no });
    var okButton = $('<a>', { class: 'button red', text: jsLang.global.yes });

    var okAction = function() { APP.modal.closeModal(); $.rails.allowActionAnswer(element, true); };

    notOkButton.on('click', function() { APP.modal.closeModal(); $.rails.allowActionAnswer(element, false); });
    okButton.on('click', okAction);

    $(document).on('keyup.enter', function(e) {
      e.preventDefault();
      if (e.keyCode == 13) { okAction(); }
    });

    content.append(notOkButton);
    content.append(okButton);

    APP.modal.openModal('confirm', content);
  },
  keyboardShortcutsInit: function() {
    $(document).keydown(function(event) {
      if(event.altKey) {
        var keyString = String.fromCharCode(event.which);
        $('#main-menu > li > a').each(function(){
          var menuItemId = $(this).parent().attr('id');
          var menuItemShortcutKey = APP.global.getShortcutKeyById($(this).data('shortcutFor'));
          if(keyString == menuItemShortcutKey) {
            return APP.global.executeShortcut(menuItemId);
          }
        });
      }
    });
  },
  executeShortcut: function(htmlId) {
    this.slideSubMenuByMenuItem(htmlId, true);
    return false;
  },
  getShortcutKeyById: function(id) {
    var key = jsLang.shortcutKeys[id.replace(/[^a-zA-Z0-9]/g, '_')];
    if (typeof(key) != 'undefined' && key.length == 1) {
      return key.toUpperCase();
    } else {
      return false;
    }
  },
  initializeTabs: function() {
    var container = $('#tabs');
    container.tabs({ active: this.determineFirstTabWithErrors(container) });
  },
  determineFirstTabWithErrors: function(container) {
    // Determines the first tab to open. This is the first tab with errors (if any, else simply open the first tab). Also adds the 'with-errors' class to any tabs with errors.
    var first = 0;
    var determined = false;
    container.find('.nav a').each(function(index) {
      var id = $(this).attr('href'); // Starts with #
      var tab = container.find(id);
      if(tab.find('div.field_with_errors').length) {
        if(first == 0 && !determined) {
          first = index;
          determined = true;
        }
        $(this).addClass('with-errors');
      }
    });
    return first;
  },
  initializeSpecialFormFields: function(parent) {
    if(!parent) {
      parent = document.body;
    }
    $(parent).find('select, :radio, :checkbox, input[type=file]').cwicControl();
    $(parent).find('.datepicker-field').datepicker();
    $(parent).find('.timepicker-field').timepicker({ showPeriodLabels: false });
    $(parent).find('input.organisation_client_select').each(this.initializeOrganisationClientSelect);
    $(parent).find('input.with-clear').each(this.initializeInputWithClear);

    $(document).on('nested:fieldAdded', function(e) { APP.global.initializeSpecialFormFields(e.field); });
  },
  initializeInputWithClear: function() {
    var input = $(this);
    if(input.val() != '') {
      input.wrap('<div class="field-with-clear"></div>');
      var span = $('<span>', { text: 'X' });
      input.after(span);
      span.on('click', function(){
        input.val(null);
        input.trigger('change');
      });
    }
  },
  initializeOrganisationClientSelect: function() {
    $(this).select2({
      initSelection: function(element, callback) {
          var id = $(element).val();
          var text = $(element).data('prev-selected') || jsLang.reservations.select_client_placeholder;
          return callback({id: id, text: text });
      },
      placeholder: jsLang.reservations.select_client_placeholder,
      minimumInputLength: 1,
      width: 'resolve',
      ajax: {
        url: Routes.organisation_organisation_clients_autocomplete_search_path(current_organisation, { format: 'json' }),
        dataType: 'json',
        quietMillis: 500,
        data: function(term, page) {
          return { q: term, page: page };
        },
        results: function(data, page) {
          return data;
        }
      },
    });
  }, // The following function will be used as a callback for loading the google maps libs and will be called after the libs is loaded
  initializeGoogleMapsFunctions: function() {
    if (typeof google === 'object' && typeof google.maps === 'object') {
      if(typeof APP[$('body').data('controller')] === 'object' && typeof APP[$('body').data('controller')].afterGoogleMapsLoaded == 'function') {
        APP[$('body').data('controller')].afterGoogleMapsLoaded();
      }
    }
  }
};
